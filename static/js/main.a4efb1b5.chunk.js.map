{"version":3,"sources":["BoardContext.jsx","components/Cell.jsx","components/Board.jsx","components/CodeSection.jsx","components/MySlider.jsx","components/SliderBox.jsx","components/Card.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["BoardContext","createContext","initConstraints","amount","constraints","i","push","BoardProvider","children","useState","length","setLength","height","setHeight","constraintsX","setConstraintsX","constraintsY","setConstraintsY","setConstraints","board","j","makeBoard","setBoard","change","setChange","row","setRow","col","setCol","useEffect","changeConstraintsX","newConstX","checkCol","slice","newConstY","checkRow","changeConstraintsY","editBoardX","editBoardY","len","extra","map","newBoard","Array","from","x","newRow","concat","rows","block","Provider","value","editCell","clicked","Cell","useContext","setClicked","width","background","borderColor","borderWidth","cursor","onClick","Board","alignItems","justifyContent","spacing","CodeSection","React","memo","color","textAlign","JSON","stringify","MySlider","intiValue","setValue","defaultValue","min","max","step","aria-label","focusThumbOnChange","onChangeEnd","val","bg","SliderBox","type","flexDir","p","marginBottom","marginRight","Card","borderRadius","margin","App","theme","flexDirection","minHeight","fontSize","href","isExternal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4efb1b5.chunk.js","sourcesContent":["import { createContext, useEffect, useState } from 'react';\r\nconst INIT_VALUE = 5;\r\n\r\nexport const BoardContext = createContext();\r\n\r\nconst initConstraints = amount => {\r\n  const constraints = [];\r\n  for (let i = 0; i < amount; i++) {\r\n    constraints.push([]);\r\n  }\r\n  return constraints;\r\n};\r\n\r\nconst makeBoard = (length, height) => {\r\n  const board = [];\r\n  for (let i = 0; i < height; i++) {\r\n    board.push([]);\r\n    for (let j = 0; j < length; j++) {\r\n      board[i].push(-1);\r\n    }\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const BoardProvider = ({ children }) => {\r\n  const [length, setLength] = useState(INIT_VALUE);\r\n  const [height, setHeight] = useState(INIT_VALUE);\r\n  const [constraintsX, setConstraintsX] = useState(initConstraints(length));\r\n  const [constraintsY, setConstraintsY] = useState(initConstraints(height));\r\n  const [constraints, setConstraints] = useState([constraintsY, constraintsX]);\r\n  const [board, setBoard] = useState(makeBoard(length, height));\r\n  const [change, setChange] = useState(true);\r\n  const [row, setRow] = useState(0);\r\n  const [col, setCol] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setConstraintsX(changeConstraintsX(length));\r\n  }, [length]);\r\n\r\n  useEffect(() => {\r\n    const newConstX = checkCol(col); // edit the right constraint in the left array\r\n    setConstraintsX([\r\n      ...constraintsX.slice(0, col),\r\n      newConstX,\r\n      ...constraintsX.slice(col + 1, 21),\r\n    ]); // adding the right constraint in the right side\r\n  }, [col, change]);\r\n\r\n  useEffect(() => {\r\n    const newConstY = checkRow(row); // edit the right constraint in the left array\r\n    setConstraintsY([\r\n      ...constraintsY.slice(0, row),\r\n      newConstY,\r\n      ...constraintsY.slice(row + 1, 21),\r\n    ]); // adding the constraint to the right place on the left side\r\n  }, [row, change]);\r\n\r\n  useEffect(() => {\r\n    setConstraintsY(changeConstraintsY(height));\r\n  }, [height]);\r\n\r\n  useEffect(() => {\r\n    setBoard(editBoardX(length));\r\n  }, [length]);\r\n\r\n  useEffect(() => {\r\n    setBoard(editBoardY(height));\r\n  }, [height]);\r\n\r\n  useEffect(() => {\r\n    setConstraints([constraintsY, constraintsX]);\r\n  }, [constraintsX, constraintsY]);\r\n\r\n  const changeConstraintsY = len => {\r\n    if (len < constraintsY.length) {\r\n      return constraintsY.slice(0, len);\r\n    } else {\r\n      let extra = [];\r\n      const constraints = constraintsY.map(row => row.slice());\r\n      for (let i = constraintsY.length; i < len; i++) {\r\n        constraints.push(extra);\r\n      }\r\n      return constraints;\r\n    }\r\n  };\r\n\r\n  const changeConstraintsX = len => {\r\n    if (len < constraintsX.length) {\r\n      return constraintsX.slice(0, len);\r\n    } else {\r\n      let extra = [];\r\n      const constraints = constraintsX.map(row => row.slice());\r\n      for (let i = constraintsX.length; i < len; i++) {\r\n        constraints.push(extra);\r\n      }\r\n      return constraints;\r\n    }\r\n  };\r\n\r\n  const editBoardX = len => {\r\n    let newBoard = [];\r\n    if (len > board[0].length) {\r\n      var extra = Array.from({ length: len - board[0].length }, (x, i) => -1);\r\n    }\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n      let newRow = board[i].slice(0, len);\r\n      if (len > board[0].length) {\r\n        newRow = newRow.concat(extra);\r\n      }\r\n      newBoard.push(newRow);\r\n    }\r\n    return newBoard;\r\n  };\r\n\r\n  const editBoardY = rows => {\r\n    if (rows < board.length) {\r\n      return board.slice(0, rows);\r\n    } else {\r\n      let extra = Array.from({ length: board[0].length }, (x, i) => -1);\r\n      const newBoard = board.map(row => row.slice());\r\n      for (let i = board.length; i < rows; i++) {\r\n        newBoard.push(extra);\r\n      }\r\n      return newBoard;\r\n    }\r\n  };\r\n\r\n  const editCell = (row, col, clicked) => {\r\n    const newRow = board[row].slice(0);\r\n    newRow[col] = clicked ? 1 : 0;\r\n    setBoard([...board.slice(0, row), newRow, ...board.slice(row + 1, 21)]); // Changes the board\r\n  };\r\n\r\n  const isLastInRow = index => {\r\n    if (index === board[0].length - 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const isLastInCol = (index, col) => {\r\n    if (index === board.length - 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const checkRow = row => {\r\n    let constraints = [];\r\n    let block = 0;\r\n    for (let i = 0; i < board[row].length; i++) {\r\n      if (board[row][i] === 1) {\r\n        if (isLastInRow(i)) {\r\n          block += 1;\r\n          constraints.push(block);\r\n        } else if (board[row][i + 1] === 1) {\r\n          block += 1;\r\n        } else {\r\n          block += 1;\r\n          constraints.push(block);\r\n          block = 0;\r\n        }\r\n      }\r\n    }\r\n    return constraints;\r\n  };\r\n\r\n  const checkCol = col => {\r\n    let constraints = [];\r\n    let block = 0;\r\n    for (let i = 0; i < board.length; i++) {\r\n      if (board[i][col] === 1) {\r\n        if (isLastInCol(i, col)) {\r\n          block += 1;\r\n          constraints.push(block);\r\n        } else if (board[i + 1][col] === 1) {\r\n          block += 1;\r\n        } else {\r\n          block += 1;\r\n          constraints.push(block);\r\n          block = 0;\r\n        }\r\n      }\r\n    }\r\n    return constraints;\r\n  };\r\n\r\n  return (\r\n    <BoardContext.Provider\r\n      value={{\r\n        length,\r\n        setLength,\r\n        height,\r\n        setHeight,\r\n        constraints,\r\n        board,\r\n        editCell,\r\n        change,\r\n        setChange,\r\n        setRow,\r\n        setCol,\r\n      }}\r\n    >\r\n      {children}\r\n    </BoardContext.Provider>\r\n  );\r\n};\r\n","import { Flex } from '@chakra-ui/react';\r\nimport { useContext, useState } from 'react';\r\nimport { BoardContext } from '../BoardContext';\r\n\r\nexport const Cell = ({ row, col }) => {\r\n  const { editCell, setRow, setCol, setChange, change } =\r\n    useContext(BoardContext);\r\n  const [clicked, setClicked] = useState(false);\r\n  const getClicked = () => {\r\n    setRow(row);\r\n    setCol(col);\r\n    setChange(!change);\r\n    editCell(row, col, !clicked);\r\n    setClicked(!clicked);\r\n  };\r\n  return (\r\n    <Flex\r\n      width=\"1.5rem\"\r\n      height=\"1.5rem\"\r\n      background={clicked ? '#4ECCC3' : '#FFF'}\r\n      borderColor=\"#ececec\"\r\n      borderWidth=\"1px\"\r\n      cursor=\"pointer\"\r\n      onClick={() => getClicked()}\r\n    ></Flex>\r\n  );\r\n};\r\n","import { Flex, VStack } from '@chakra-ui/react';\r\nimport { useContext } from 'react';\r\nimport { BoardContext } from '../BoardContext';\r\nimport { Cell } from './Cell';\r\n\r\nexport const Board = () => {\r\n  const { board } = useContext(BoardContext);\r\n\r\n  return (\r\n    <Flex height=\"100%\" alignItems=\"center\" justifyContent=\"center\">\r\n      <VStack spacing={0}>\r\n        {board.map((row, i) => (\r\n          <Flex key={i}>\r\n            {row.map((col, j) => (\r\n              <Cell key={j} row={i} col={j}></Cell>\r\n            ))}\r\n          </Flex>\r\n        ))}\r\n      </VStack>\r\n      <Flex height=\"60px\" width=\"1px\"></Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex, Code } from '@chakra-ui/react';\r\nimport { useContext } from 'react';\r\nimport React from 'react';\r\nimport { BoardContext } from '../BoardContext';\r\n\r\nexport const CodeSection = React.memo(() => {\r\n  const { constraints } = useContext(BoardContext);\r\n\r\n  return (\r\n    <Flex justifyContent=\"center\" alignItems=\"center\" width=\"80%\">\r\n      <Code color=\"#141414\" textAlign=\"center\">\r\n        {JSON.stringify(constraints)}\r\n      </Code>\r\n    </Flex>\r\n  );\r\n});\r\n","import {\r\n  Slider,\r\n  SliderTrack,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  Flex,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport const MySlider = ({ intiValue, setValue }) => {\r\n  return (\r\n    <Flex width=\"100%\">\r\n      <Slider\r\n        defaultValue={5}\r\n        min={1}\r\n        max={20}\r\n        step={1}\r\n        aria-label=\"slider-ex-2\"\r\n        focusThumbOnChange={false}\r\n        onChangeEnd={val => setValue(val)}\r\n      >\r\n        <SliderTrack bg=\"#e6e6e6\">\r\n          <SliderFilledTrack bg=\"#FFCC00\" />\r\n        </SliderTrack>\r\n        <SliderThumb />\r\n      </Slider>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex, Text } from '@chakra-ui/react';\r\nimport { MySlider } from './MySlider';\r\n\r\nexport const SliderBox = ({ type, value, setValue }) => {\r\n  return (\r\n    <Flex flexDir=\"column\" p={2} width=\"30%\">\r\n      <Flex flexDir=\"row\" marginBottom={2}>\r\n        <Text color=\"#141414\" marginRight={2}>\r\n          {type}:\r\n        </Text>\r\n        <Text color=\"#141414\">{value}</Text>\r\n      </Flex>\r\n      <MySlider setValue={setValue} intiValue={value}></MySlider>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex, Heading, VStack } from '@chakra-ui/react';\r\nimport { useContext } from 'react';\r\nimport { BoardContext } from '../BoardContext';\r\nimport { Board } from './Board';\r\nimport { CodeSection } from './CodeSection';\r\nimport { SliderBox } from './SliderBox';\r\n\r\nexport const Card = () => {\r\n  const { length, height, setHeight, setLength } = useContext(BoardContext);\r\n\r\n  return (\r\n    <VStack\r\n      spacing={4}\r\n      justifyContent=\"center\"\r\n      width=\"80%\"\r\n      borderRadius=\"20px\"\r\n      background=\"#f5f5f5\"\r\n      p={8}\r\n      margin={4}\r\n    >\r\n      <Heading color=\"#222222\">Nonogram Maker 5000</Heading>\r\n      <Flex justifyContent=\"space-between\" p={2} width=\"60%\">\r\n        <SliderBox\r\n          type=\"Height\"\r\n          value={height}\r\n          setValue={setHeight}\r\n        ></SliderBox>\r\n        <SliderBox\r\n          type=\"Length\"\r\n          value={length}\r\n          setValue={setLength}\r\n        ></SliderBox>\r\n      </Flex>\r\n      <Board></Board>\r\n      <CodeSection></CodeSection>\r\n    </VStack>\r\n  );\r\n};\r\n","import { ChakraProvider, Flex, Link, Text, theme } from '@chakra-ui/react';\nimport React from 'react';\nimport { Card } from './components/Card';\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        width=\"100%\"\n        minHeight=\"100vh\"\n        height=\"100%\"\n        background=\"linear-gradient(#4ECDC4 0%, #556270 100%)\"\n      >\n        <Card></Card>\n        <Flex fontSize=\"sm\">\n          <Text color=\"white\" marginRight={1}>\n            made by:\n          </Text>\n          <Link\n            href=\"https://github.com/tomer-shavit\"\n            isExternal=\"true\"\n            color=\"#4ECCC3\"\n          >\n            Tomer Shavit\n          </Link>\n        </Flex>\n        <Text fontSize=\"0.75em\" color=\"white\">\n          Intro2CS 2021\n        </Text>\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport './main.css';\nimport { BoardProvider } from './BoardContext';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <BoardProvider>\n      <App />\n    </BoardProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}